// @license Â© 2019 Google LLC. Licensed under the Apache License, Version 2.0.
const doc=document,store=localStorage,PREFERS_COLOR_SCHEME="prefers-color-scheme",MEDIA="media",LIGHT="light",DARK="dark",NO_PREFERENCE="no-preference",MQ_DARK=`(prefers-color-scheme:${DARK})`,MQ_LIGHT=`(prefers-color-scheme:${LIGHT}),(prefers-color-scheme:no-preference)`,LINK_REL_STYLESHEET="link[rel=stylesheet]",REMEMBER="remember",LEGEND="legend",TOGGLE="toggle",SWITCH="switch",APPEARANCE="appearance",PERMANENT="permanent",MODE="mode",COLOR_SCHEME_CHANGE="colorschemechange",PERMANENT_COLOR_SCHEME="permanentcolorscheme",ALL="all",NOT_ALL="not all",NAME="dark-mode-toggle",DEFAULT_URL="https://googlechromelabs.github.io/dark-mode-toggle/demo/",installStringReflection=(e,t,o=t)=>{Object.defineProperty(e,o,{enumerable:!0,get(){const e=this.getAttribute(t);return null===e?"":e},set(e){this.setAttribute(t,e)}})},installBoolReflection=(e,t,o=t)=>{Object.defineProperty(e,o,{enumerable:!0,get(){return this.hasAttribute(t)},set(e){e?this.setAttribute(t,""):this.removeAttribute(t)}})},template=doc.createElement("template");template.innerHTML=`<style>*,::after,::before{box-sizing:border-box}:host{contain:content;display:block}:host([hidden]){display:none}form{background-color:var(--${NAME}-background-color,transparent);color:var(--${NAME}-color,inherit);padding:0}fieldset{position:relative;border:none;margin:0;padding:0}legend{font:var(--${NAME}-legend-font,inherit);padding:0}input,label{cursor:pointer}input{opacity:0;position:absolute;pointer-events:none}#darkCheckbox{display:none}#checkboxLabel::before{content:url(https://min.studio/assets/images/darkmode-off.svg);position:absolute;top:-2px;left:-36px;width:28px;height:28px}#checkboxLabel{position:absolute;top:2px;left:38px;display:block;width:42px;height:24px;border-radius:50px;border:1px solid rgba(89,89,89,.35);background-color:transparent;transition:background-color .3s,border-color .3s}#checkboxLabel:hover{border:1px solid rgba(89,89,89,.7)}#checkboxLabel::after{content:'';position:absolute;top:3px;left:3px;display:block;width:16px;height:16px;border-radius:50px;background-color:rgba(89,89,89,.35);transition:background-color .3s,left .3s,right .3s}#checkboxLabel:hover::after{background-color:rgba(89,89,89,.7)}#darkCheckbox:checked+#checkboxLabel::before{content:url(https://min.studio/assets/images/darkmode-on.svg)}#darkCheckbox:checked+#checkboxLabel{border-color:transparent;background-color:rgba(255,255,255,.25)}#darkCheckbox:checked+#checkboxLabel:hover{background-color:rgba(255,255,255,.35)}#darkCheckbox:checked+#checkboxLabel::after{left:21px;background-color:#dfdfdf}#darkCheckbox:checked+#checkboxLabel:hover::after{background-color:#fff}</style><form><fieldset><legend></legend><input id="lightRadio" name="mode" type="radio"><label id="lightLabel" for="lightRadio"></label><input id="darkRadio" name="mode" type="radio"><label id="darkLabel" for="darkRadio"></label><input id="darkCheckbox" type="checkbox"><label id="checkboxLabel" for="darkCheckbox"></label><aside><input id="permanentCheckbox" type="checkbox"><label id="permanentLabel" for="permanentCheckbox"></label></aside></fieldset></form>`;export class DarkModeToggle extends HTMLElement{static get observedAttributes(){return[MODE,APPEARANCE,PERMANENT,LEGEND,LIGHT,DARK,REMEMBER]}constructor(){super(),installStringReflection(this,MODE),installStringReflection(this,APPEARANCE),installStringReflection(this,LEGEND),installStringReflection(this,LIGHT),installStringReflection(this,DARK),installStringReflection(this,REMEMBER),installBoolReflection(this,PERMANENT),this._darkCSS=null,this._lightCSS=null,doc.addEventListener("colorschemechange",e=>{this.mode=e.detail.colorScheme,this._updateRadios(),this._updateCheckbox()}),doc.addEventListener("permanentcolorscheme",e=>{this.permanent=e.detail.permanent,this._permanentCheckbox.checked=this.permanent}),this._initializeDOM()}_initializeDOM(){const e=this.attachShadow({mode:"closed"});e.appendChild(template.content.cloneNode(!0)),this._darkCSS=doc.querySelectorAll(`link[rel=stylesheet][media*=prefers-color-scheme][media*="${DARK}"]`),this._lightCSS=doc.querySelectorAll(`link[rel=stylesheet][media*=prefers-color-scheme][media*="${LIGHT}"],link[rel=stylesheet][media*=prefers-color-scheme][media*="no-preference"]`),this._lightRadio=e.querySelector("#lightRadio"),this._lightLabel=e.querySelector("#lightLabel"),this._darkRadio=e.querySelector("#darkRadio"),this._darkLabel=e.querySelector("#darkLabel"),this._darkCheckbox=e.querySelector("#darkCheckbox"),this._checkboxLabel=e.querySelector("#checkboxLabel"),this._legendLabel=e.querySelector("legend"),this._permanentAside=e.querySelector("aside"),this._permanentCheckbox=e.querySelector("#permanentCheckbox"),this._permanentLabel=e.querySelector("#permanentLabel");const t=matchMedia(MQ_DARK).media!==NOT_ALL;t&&matchMedia(MQ_DARK).addListener(({matches:e})=>{this.mode=e?DARK:LIGHT,this._dispatchEvent("colorschemechange",{colorScheme:this.mode})});const o=store.getItem(NAME);o&&[DARK,LIGHT].includes(o)?(this.mode=o,this._permanentCheckbox.checked=!0,this.permanent=!0):t&&(this.mode=matchMedia(MQ_LIGHT).matches?LIGHT:DARK),this.mode||(this.mode=LIGHT),this.permanent&&!o&&store.setItem(NAME,this.mode),this.appearance||(this.appearance=TOGGLE),this._updateAppearance(),this._updateRadios(),this._updateCheckbox(),[this._lightRadio,this._darkRadio].forEach(e=>{e.addEventListener("change",()=>{this.mode=this._lightRadio.checked?LIGHT:DARK,this._updateCheckbox(),this._dispatchEvent("colorschemechange",{colorScheme:this.mode})})}),this._darkCheckbox.addEventListener("change",()=>{this.mode=this._darkCheckbox.checked?DARK:LIGHT,this._updateRadios(),this._dispatchEvent("colorschemechange",{colorScheme:this.mode})}),this._permanentCheckbox.addEventListener("change",()=>{this.permanent=this._permanentCheckbox.checked,this._dispatchEvent("permanentcolorscheme",{permanent:this.permanent})}),this._updateMode(),this._dispatchEvent("colorschemechange",{colorScheme:this.mode}),this._dispatchEvent("permanentcolorscheme",{permanent:this.permanent})}attributeChangedCallback(e,t,o){if(e===MODE){if(![LIGHT,DARK].includes(o))throw new RangeError(`Allowed values: "${LIGHT}" and "${DARK}".`);matchMedia("(hover:none)").matches&&this.remember&&this._showPermanentAside(),this.permanent&&store.setItem(NAME,this.mode),this._updateRadios(),this._updateCheckbox(),this._updateMode()}else if(e===APPEARANCE){if(![TOGGLE,SWITCH].includes(o))throw new RangeError(`Allowed values: "${TOGGLE}" and "${SWITCH}".`);this._updateAppearance()}else e===PERMANENT?(this.permanent?store.setItem(NAME,this.mode):store.removeItem(NAME),this._permanentCheckbox.checked=this.permanent):e===LEGEND?this._legendLabel.textContent=o:e===REMEMBER?this._permanentLabel.textContent=o:e===LIGHT?(this._lightLabel.textContent=o,this.mode===LIGHT&&(this._checkboxLabel.textContent=o)):e===DARK&&(this._darkLabel.textContent=o,this.mode===DARK&&(this._checkboxLabel.textContent=o))}_dispatchEvent(e,t){this.dispatchEvent(new CustomEvent(e,{bubbles:!0,composed:!0,detail:t}))}_updateAppearance(){const e=this.appearance===TOGGLE;this._lightRadio.hidden=e,this._lightLabel.hidden=e,this._darkRadio.hidden=e,this._darkLabel.hidden=e,this._darkCheckbox.hidden=!e,this._checkboxLabel.hidden=!e}_updateRadios(){this.mode===LIGHT?this._lightRadio.checked=!0:this._darkRadio.checked=!0}_updateCheckbox(){this.mode===LIGHT?(this._checkboxLabel.style.setProperty(`--${NAME}-checkbox-icon`,`var(--${NAME}-light-icon,url("${DEFAULT_URL}moon.png"))`),this._checkboxLabel.textContent=this.light,this._darkCheckbox.checked=!1):(this._checkboxLabel.style.setProperty(`--${NAME}-checkbox-icon`,`var(--${NAME}-dark-icon,url("${DEFAULT_URL}sun.png"))`),this._checkboxLabel.textContent=this.dark,this._darkCheckbox.checked=!0)}_updateMode(){this.mode===LIGHT?(this._lightCSS.forEach(e=>{e.media=ALL,e.disabled=!1}),this._darkCSS.forEach(e=>{e.media=NOT_ALL,e.disabled=!0})):(this._darkCSS.forEach(e=>{e.media=ALL,e.disabled=!1}),this._lightCSS.forEach(e=>{e.media=NOT_ALL,e.disabled=!0}))}_showPermanentAside(){this._permanentAside.style.visibility="visible",setTimeout(()=>{this._permanentAside.style.visibility="hidden"},3e3)}}customElements.define(NAME,DarkModeToggle);